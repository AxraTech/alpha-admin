{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/views/user/view/user-right/service_token/ProjectListTable.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/views/user/view/user-right/service_token/ProjectListTable.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/views/user/view/user-right/service_token/ProjectListTable.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiT,GAC9U,+EACA"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/views/user/view/user-right/service_token/UserActivityTimeline.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/views/user/view/user-right/service_token/UserActivityTimeline.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/views/user/view/user-right/service_token/UserActivityTimeline.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqT,GAClV,mFACA"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/views/user/view/user-right/service_token/ServiceTokenUserListTable.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/views/user/view/user-right/service_token/ServiceTokenUserListTable.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/views/user/view/user-right/service_token/ServiceTokenUserListTable.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0T,GACvV,wFACA"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/graphql/fragments.js"],"sourcesContent":["import {gql} from \"@apollo/client\";\r\n\r\nexport const PRODUCT_BASE_FIELDS = gql`\r\nfragment productBaseFields on products {\r\n  id\r\n  title\r\n  price\r\n  product_medias(order_by: {updated_at: desc}, limit: 1) {\r\n    id\r\n    media_url\r\n  }\r\n  product_discounts(limit: 1, order_by: {discounted_value: desc}) {\r\n    id\r\n    discount_type\r\n    discounted_value\r\n  }\r\n}\r\n`;\r\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,sBAAsB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;AAevC,CAAC"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/graphql/queries.js"],"sourcesContent":["import { gql } from '@apollo/client'\r\nimport { PRODUCT_BASE_FIELDS } from './fragments'\r\n\r\nexport const GET_USERS = gql`\r\n  query getUsers {\r\n    users {\r\n      id\r\n      name\r\n      phone\r\n      profile_picture_url\r\n      role\r\n      status\r\n      delivery_name\r\n      delivery_phone\r\n      delivery_address\r\n      created_at\r\n      dealer {\r\n        id\r\n        name\r\n        phone\r\n        address\r\n        city_name\r\n        township_name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_USER_BY_ID = gql`\r\n  query getUsers($userId: uuid!) {\r\n    users_by_pk(id: $userId) {\r\n      id\r\n      name\r\n      phone\r\n      profile_picture_url\r\n      role\r\n      status\r\n      delivery_name\r\n      delivery_phone\r\n      delivery_address\r\n      dealer {\r\n        id\r\n        name\r\n        phone\r\n        address\r\n        city_name\r\n        township_name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// product\r\nexport const GET_PRODUCT_CATEGORIES = gql`\r\n  query getProductCategories {\r\n    product_categories(order_by: { updated_at: desc }) {\r\n      id\r\n      title\r\n      image_url\r\n      created_at\r\n      updated_at\r\n      products_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_PRODUCTS = gql`\r\n  query getProducts {\r\n    products(order_by: { updated_at: desc }) {\r\n      id\r\n      title\r\n      created_at\r\n      updated_at\r\n      description_html\r\n      serial_number\r\n      product_medias(order_by: { updated_at: desc }, limit: 1) {\r\n        id\r\n        media_url\r\n      }\r\n      product_category {\r\n        id\r\n        title\r\n        image_url\r\n      }\r\n      brand {\r\n        id\r\n        title\r\n        image_url\r\n      }\r\n      price\r\n      sku\r\n      disabled\r\n    }\r\n  }\r\n`\r\n\r\nexport const PRODUCTS_BY_ID = gql`\r\n  query productById($id: uuid!) {\r\n    products_by_pk(id: $id) {\r\n      id\r\n      title\r\n      serial_number\r\n      description_html\r\n      product_medias(order_by: { updated_at: desc }, limit: 1) {\r\n        id\r\n        media_url\r\n      }\r\n      product_category {\r\n        id\r\n        title\r\n        image_url\r\n      }\r\n      product_discounts {\r\n        id\r\n        min_order\r\n        discounted_value\r\n      }\r\n      brand {\r\n        id\r\n        title\r\n        image_url\r\n      }\r\n      price\r\n      sku\r\n      disabled\r\n    }\r\n  }\r\n`\r\n\r\nexport const PRODUCT_BRANDs = gql`\r\n  query productBrand {\r\n    brands {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`\r\nexport const PRODUCT_CATS = gql`\r\n  query productCat {\r\n    product_categories {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`\r\nexport const GET_BRANDS = gql`\r\n  query brands {\r\n    brands(order_by: { updated_at: desc }) {\r\n      id\r\n      title\r\n      image_url\r\n      created_at\r\n      updated_at\r\n      products_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_NEWS_CATS = gql`\r\n  query newCategorys {\r\n    news_categories {\r\n      id\r\n      title\r\n      created_at\r\n      updated_at\r\n      news_aggregate {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const NEW_CAT_BY_ID = gql`\r\n  query newCatById($id: uuid!) {\r\n    news_categories_by_pk(id: $id) {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_NEWS = gql`\r\n  query news {\r\n    news(order_by: { updated_at: desc }) {\r\n      id\r\n      title\r\n      body_html\r\n      image_url\r\n      disabled\r\n      created_at\r\n      news_category_id\r\n      news_category {\r\n        id\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const NEW_BY_ID = gql`\r\n  query newId($id: uuid!) {\r\n    news_by_pk(id: $id) {\r\n      id\r\n      title\r\n      image_url\r\n      news_category {\r\n        id\r\n        title\r\n      }\r\n      news_related_products {\r\n        product {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const NEWS_CATS = gql`\r\n  query newCats {\r\n    news_categories {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ALL_INVOICES = gql`\r\n  query getAllInvoices {\r\n    invoices(order_by: { updated_at: desc }) {\r\n      id\r\n      invoice_number\r\n      status\r\n      balance\r\n      created_at\r\n      total\r\n      discount\r\n      invoice_status {\r\n        id\r\n        name\r\n      }\r\n      user {\r\n        id\r\n        name\r\n        profile_picture_url\r\n      }\r\n      created_at\r\n      updated_at\r\n\r\n      invoice_file_url\r\n    }\r\n  }\r\n`\r\nexport const INVOICE_TABS = gql`\r\n  query invoiceTabs($user_id: uuid!) {\r\n    invoices(where: { user_id: { _eq: $user_id } }) {\r\n      id\r\n      invoice_number\r\n      status\r\n      balance\r\n      total\r\n      discount\r\n      invoice_status {\r\n        id\r\n        name\r\n      }\r\n      user {\r\n        id\r\n        name\r\n        profile_picture_url\r\n      }\r\n      created_at\r\n      updated_at\r\n\r\n      invoice_file_url\r\n    }\r\n  }\r\n`\r\n\r\nexport const INVOICE_STATUS = gql`\r\n  query invoiceStatus {\r\n    invoice_status {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\n\r\nexport const INVOICE_BY_ID = gql`\r\n  query invoiceById($id: uuid!) {\r\n    invoices_by_pk(id: $id) {\r\n      id\r\n      balance\r\n      invoice_number\r\n      status\r\n      note\r\n      total\r\n      created_at\r\n      updated_at\r\n      user {\r\n        id\r\n        name\r\n        email\r\n        phone\r\n      }\r\n      order {\r\n        id\r\n        items_total\r\n        order_items {\r\n          product {\r\n            title\r\n            id\r\n            price\r\n            brand {\r\n              id\r\n              title\r\n            }\r\n          }\r\n\r\n          quantity\r\n          total\r\n        }\r\n        receiver_name\r\n        receiver_phone\r\n        receiver_address\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAYMENT_BY_INVOICE_ID = gql`\r\n  query payments($invoice_id: uuid!) {\r\n    payments(where: { invoice_id: { _eq: $invoice_id } }) {\r\n      id\r\n      amount\r\n      payment_date\r\n      payment_method\r\n      updated_at\r\n      created_at\r\n      invoice_id\r\n    }\r\n  }\r\n`\r\nexport const NEWS_RELATED_PRODUCTS = gql`\r\n  query newProduct($news_id: uuid!) {\r\n    news_related_products(where: { news_id: { _eq: $news_id } }) {\r\n      id\r\n      news_id\r\n      product_id\r\n    }\r\n  }\r\n`\r\n\r\nexport const PRODUCT_SELECT = gql`\r\n  query productSelect {\r\n    products {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`\r\nexport const GET_ALL_QUOTATIONS = gql`\r\n  query getAllQuotations {\r\n    quotations(order_by: { updated_at: desc }) {\r\n      id\r\n      dealer_remark\r\n      created_at\r\n      updated_at\r\n      status\r\n      quotation_status {\r\n        id\r\n        name\r\n      }\r\n      user {\r\n        id\r\n        name\r\n        profile_picture_url\r\n      }\r\n      quotation_file_url\r\n      quotation_number\r\n      total_amount\r\n    }\r\n  }\r\n`\r\nexport const QUOTATION_TABS = gql`\r\n  query quotationTabs($user_id: uuid!) {\r\n    quotations(where: { user_id: { _eq: $user_id } }) {\r\n      id\r\n      dealer_remark\r\n      created_at\r\n      updated_at\r\n      status\r\n      quotation_status {\r\n        id\r\n        name\r\n      }\r\n      user {\r\n        id\r\n        name\r\n        profile_picture_url\r\n      }\r\n      quotation_file_url\r\n      quotation_number\r\n      total_amount\r\n    }\r\n  }\r\n`\r\nexport const GET_ALL_SERVICE_CENTERS = gql`\r\n  query serviceCenters {\r\n    service_centers(order_by: { updated_at: desc }) {\r\n      id\r\n      name\r\n      address\r\n      phone\r\n      created_at\r\n      updated_at\r\n    }\r\n  }\r\n`\r\nexport const QUOTATION_STATUS = gql`\r\n  query aa {\r\n    quotation_status {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\nexport const QUOTATION_BY_ID = gql`\r\n  query quotationById($id: uuid!) {\r\n    quotations_by_pk(id: $id) {\r\n      id\r\n      created_at\r\n      updated_at\r\n      dealer_remark\r\n      total_amount\r\n      quotation_number\r\n      status\r\n      user {\r\n        id\r\n        name\r\n        phone\r\n        orders {\r\n          receiver_address\r\n          receiver_name\r\n          receiver_phone\r\n        }\r\n      }\r\n      quotation_items {\r\n        id\r\n        quantity\r\n        product {\r\n          price\r\n          title\r\n\r\n          brand {\r\n            id\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_ALL_SERVICE_TOKENS = gql`\r\n  query getAllServiceTokens {\r\n    service_tokens(order_by: { updated_at: desc }) {\r\n      id\r\n      completed_at\r\n      created_at\r\n      description\r\n      delivering_at\r\n      document_photo_url\r\n      is_warranty_valid\r\n      issue_media_type\r\n      issue_media_url\r\n      picking_up_at\r\n      product\r\n      processing_at\r\n      service_fee\r\n      service_status {\r\n        name\r\n      }\r\n      status\r\n      token_number\r\n      updated_at\r\n      user {\r\n        name\r\n        id\r\n        profile_picture_url\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const SERVICE_TOKEN_TABS = gql`\r\n  query serviceTokenTabs($user_id: uuid!) {\r\n    service_tokens(where: { user_id: { _eq: $user_id } }) {\r\n      id\r\n      completed_at\r\n      created_at\r\n      description\r\n      delivering_at\r\n      document_photo_url\r\n      is_warranty_valid\r\n      issue_media_type\r\n      issue_media_url\r\n      picking_up_at\r\n      product\r\n      processing_at\r\n      service_fee\r\n      service_status {\r\n        name\r\n      }\r\n      status\r\n      token_number\r\n      updated_at\r\n      user {\r\n        name\r\n        id\r\n        profile_picture_url\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const SERVICE_TOKEN_BY_ID = gql`\r\n  query serviceTokensById($id: uuid!) {\r\n    service_tokens_by_pk(id: $id) {\r\n      id\r\n      completed_at\r\n      created_at\r\n      description\r\n      delivering_at\r\n      document_photo_url\r\n      is_warranty_valid\r\n      issue_media_type\r\n      issue_media_url\r\n      picking_up_at\r\n      product\r\n      processing_at\r\n      service_fee\r\n      service_status {\r\n        name\r\n      }\r\n      status\r\n      token_number\r\n      updated_at\r\n      user {\r\n        name\r\n        id\r\n        phone\r\n        email\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const ORDER_STATUS = gql`\r\n  query OrderStatus {\r\n    order_status {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\nexport const GET_ALL_ORDERS = gql`\r\n  query getAllOrders {\r\n    orders(order_by: { updated_at: desc }) {\r\n      id\r\n      order_number\r\n      completion_photo_url\r\n      completed_at\r\n      created_at\r\n      delivering_at\r\n      delivery_fee\r\n      discount\r\n      items_total\r\n      order_status {\r\n        name\r\n        id\r\n      }\r\n      ordered_at\r\n      preparing_at\r\n      receiver_address\r\n      receiver_name\r\n      receiver_phone\r\n      remark\r\n      status\r\n      total\r\n      updated_at\r\n      user {\r\n        id\r\n        name\r\n        profile_picture_url\r\n        user_role {\r\n          role_name\r\n        }\r\n      }\r\n      user_id\r\n    }\r\n  }\r\n`\r\nexport const ORDERS_TABS = gql`\r\n  query orderTabs($user_id: uuid!) {\r\n    orders(where: { user_id: { _eq: $user_id } }) {\r\n      id\r\n      order_number\r\n      completion_photo_url\r\n      completed_at\r\n      created_at\r\n      delivering_at\r\n      delivery_fee\r\n      discount\r\n      items_total\r\n      order_status {\r\n        name\r\n        id\r\n      }\r\n      ordered_at\r\n      preparing_at\r\n      receiver_address\r\n      receiver_name\r\n      receiver_phone\r\n      remark\r\n      status\r\n      total\r\n      updated_at\r\n      user {\r\n        id\r\n        name\r\n        profile_picture_url\r\n        user_role {\r\n          role_name\r\n        }\r\n      }\r\n      user_id\r\n    }\r\n  }\r\n`\r\nexport const ORDERS_BY_ID = gql`\r\n  query ordersById($id: uuid!) {\r\n    orders_by_pk(id: $id) {\r\n      id\r\n      order_number\r\n      completion_photo_url\r\n      completed_at\r\n      created_at\r\n      delivering_at\r\n      delivery_fee\r\n      discount\r\n      items_total\r\n      order_status {\r\n        name\r\n        id\r\n      }\r\n      ordered_at\r\n      preparing_at\r\n      receiver_address\r\n      receiver_name\r\n      receiver_phone\r\n      remark\r\n      status\r\n      total\r\n      updated_at\r\n      receiver_name\r\n      receiver_phone\r\n      order_items {\r\n        id\r\n        quantity\r\n        total\r\n        unit_price\r\n        product {\r\n          id\r\n          title\r\n          brand {\r\n            id\r\n            title\r\n          }\r\n        }\r\n      }\r\n      user {\r\n        id\r\n        name\r\n        phone\r\n        email\r\n        profile_picture_url\r\n        user_role {\r\n          role_name\r\n        }\r\n      }\r\n      user_id\r\n    }\r\n  }\r\n`\r\nexport const ORDERS_AGGREGATE = gql`\r\n  query orderAggregate {\r\n    activeOrder: orders_aggregate(\r\n      where: {\r\n        _and: [{ status: { _neq: \"completed\" } }, { status: { _neq: \"canceled\" } }, { status: { _neq: \"refunded\" } }]\r\n      }\r\n    ) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    completeOrder: orders_aggregate(where: { status: { _eq: \"completed\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    refundedOrder: orders_aggregate(where: { status: { _eq: \"refunded\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    canceledOrder: orders_aggregate(where: { status: { _eq: \"canceled\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const PRODUCT_AGGREGATE = gql`\r\n  query productAggregate {\r\n    brandProduct: products_aggregate(distinct_on: brand_id) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    categoryProduct: products_aggregate(distinct_on: category_id) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    disableProduct: products_aggregate(where: { disabled: { _eq: true } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    activeProduct: products_aggregate(where: { disabled: { _eq: false } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const NEWS_AGGREGATE = gql`\r\n  query productAggregate {\r\n    totalNews: news_aggregate {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    categoryNews: news_aggregate(distinct_on: news_category_id) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    disableNews: news_aggregate(where: { disabled: { _eq: true } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    activeNews: news_aggregate(where: { disabled: { _eq: false } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_ALL_DEALERS = gql`\r\n  query getAllDealers {\r\n    dealers {\r\n      id\r\n      address\r\n      city_name\r\n      name\r\n      phone\r\n      township_name\r\n      user {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const GET_ALL_ADMINS = gql`\r\n  query admins {\r\n    admins(order_by: { updated_at: desc }) {\r\n      id\r\n      name\r\n      email\r\n      role\r\n      password\r\n      created_at\r\n      updated_at\r\n    }\r\n  }\r\n`\r\nexport const USER_ROLES = gql`\r\n  query userRoles {\r\n    user_roles {\r\n      id\r\n      role_name\r\n    }\r\n  }\r\n`\r\nexport const GET_PAYMENT_METHODS = gql`\r\n  query paymentMethods {\r\n    payment_methods {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\n\r\nexport const ADMIN_BY_PK = gql`\r\n  query adminById($id: uuid!) {\r\n    admins_by_pk(id: $id) {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\nexport const ADMIN_ROLES = gql`\r\n  query adminRoles {\r\n    admin_roles {\r\n      id\r\n      role_name\r\n    }\r\n  }\r\n`\r\nexport const ADMIN_ROLES_AGGREGATE = gql`\r\n  query orderAggregate {\r\n    saleRole: admin_roles_aggregate(where: { role_name: { _eq: \"sale\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    financeRole: admin_roles_aggregate(where: { role_name: { _eq: \"finance\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    serviceRole: admin_roles_aggregate(where: { role_name: { _eq: \"service\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    adminRole: admin_roles_aggregate(where: { role_name: { _eq: \"admin\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n\r\n    managerRole: admin_roles_aggregate(where: { role_name: { _eq: \"manager\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n\r\n    deliveryRole: admin_roles_aggregate(where: { role_name: { _eq: \"delivery\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DEALERS_BY_ID = gql`\r\n  query dealerById($id: uuid!) {\r\n    dealers_by_pk(id: $id) {\r\n      id\r\n      address\r\n      city_name\r\n      name\r\n      phone\r\n      township_name\r\n      user {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_STATUS_AGGREGATE = gql`\r\n  query userAggregate {\r\n    activeUser: users_aggregate(where: { status: { _eq: \"active\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    pendingUser: users_aggregate(where: { status: { _eq: \"pending\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    disabelUser: users_aggregate(where: { status: { _eq: \"disabled\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USERS_ROLE_AGGREGATES = gql`\r\n  query userAggregate {\r\n    consumerUser: users_aggregate(where: { role: { _eq: \"consumer\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    dealerUser: users_aggregate(where: { role: { _eq: \"dealer\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const SERVICE_AGGREGATE = gql`\r\n  query userAggregate {\r\n    completedService: service_tokens_aggregate(where: { status: { _eq: \"complete\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    activeService: service_tokens_aggregate(\r\n      where: { _and: [{ status: { _neq: \"completed\" } }, { status: { _neq: \"canceled\" } }] }\r\n    ) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    canceledService: service_tokens_aggregate(where: { status: { _eq: \"canceled\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    pickService: service_tokens_aggregate(where: { status: { _eq: \"picking up\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    receivedService: service_tokens_aggregate(where: { status: { _eq: \"received token\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    processingService: service_tokens_aggregate(where: { status: { _eq: \"processing\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    deliverService: service_tokens_aggregate(where: { status: { _eq: \"delivering\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_SERVICE_AGGREGATE = gql`\r\n  query userServiceAggregate {\r\n    users_aggregate(where: { service_tokens: { id: { _is_null: false } } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_INVOICE_AGGREGATE = gql`\r\n  query userServiceAggregate {\r\n    users_aggregate(where: { invoices: { id: { _is_null: false } } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_QUOTATION_AGGREGATE = gql`\r\n  query userServiceAggregate {\r\n    users_aggregate(where: { quotations: { id: { _is_null: false } } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const INVOICE_AGGREGATE = gql`\r\n  query userAggregate {\r\n    paidInvoice: invoices_aggregate(where: { status: { _eq: \"paid\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    UnPaindInvoice: users_aggregate(where: { status: { _eq: \"unpaid\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    completeInvoice: users_aggregate(where: { status: { _eq: \"completed\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    pendingInvoice: users_aggregate(where: { status: { _eq: \"pending\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    partiallPaidInvoice: users_aggregate(where: { status: { _eq: \"partially paid\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const QUOTATION_AGGREGATE = gql`\r\n  query quotationAggregate {\r\n    pendingQuotation: quotations_aggregate(where: { status: { _eq: \"pending\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    acceptedQuotation: quotations_aggregate(where: { status: { _eq: \"accepted\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    rejectedQuotation: quotations_aggregate(where: { status: { _eq: \"rejected\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n    completedQuotation: quotations_aggregate(where: { status: { _eq: \"completed\" } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const SERVICE_STATUS = gql`\r\n  query serviceStatus {\r\n    service_status {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ALL_PRODUCT_DISCOUNT = gql`\r\n  query produtDiscount($product_id: uuid!) {\r\n    product_discounts(order_by: { updated_at: desc }, where: { product_id: { _eq: $product_id } }) {\r\n      id\r\n      customer_type\r\n      discount_type\r\n      created_at\r\n      updated_at\r\n      discounted_value\r\n      min_order\r\n      product {\r\n        brand {\r\n          id\r\n          title\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const PRODCUT_DISCOUNT_BY_ID = gql`\r\n  query productDiscountById($id: uuid!) {\r\n    product_discounts_by_pk(id: $id) {\r\n      id\r\n      customer_type\r\n      discount_type\r\n      created_at\r\n      updated_at\r\n      discounted_value\r\n      min_order\r\n      product {\r\n        brand {\r\n          id\r\n          title\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,MAAM,YAAY,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuB7B,CAAC;AAEM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBlC,CAAC;AAGM,MAAM,yBAAyB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;AAe1C,CAAC;AAEM,MAAM,eAAe,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BhC,CAAC;AAEM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BlC,CAAC;AAEM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOlC,CAAC;AACM,MAAM,eAAe,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOhC,CAAC;AACM,MAAM,aAAa,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;AAe9B,CAAC;AACM,MAAM,gBAAgB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;AAcjC,CAAC;AAEM,MAAM,gBAAgB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOjC,CAAC;AAEM,MAAM,WAAW,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;AAgB5B,CAAC;AACM,MAAM,YAAY,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;AAiB7B,CAAC;AACM,MAAM,YAAY,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAO7B,CAAC;AAEM,MAAM,mBAAmB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBpC,CAAC;AACM,MAAM,eAAe,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwBhC,CAAC;AAEM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOlC,CAAC;AAEM,MAAM,gBAAgB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCjC,CAAC;AAEM,MAAM,wBAAwB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;AAYzC,CAAC;AACM,MAAM,wBAAwB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;AAQzC,CAAC;AAEM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOlC,CAAC;AACM,MAAM,qBAAqB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBtC,CAAC;AACM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBlC,CAAC;AACM,MAAM,0BAA0B,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;AAW3C,CAAC;AACM,MAAM,mBAAmB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOpC,CAAC;AACM,MAAM,kBAAkB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCnC,CAAC;AACM,MAAM,yBAAyB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6B1C,CAAC;AACM,MAAM,qBAAqB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BtC,CAAC;AACM,MAAM,sBAAsB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BvC,CAAC;AACM,MAAM,eAAe,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOhC,CAAC;AACM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoClC,CAAC;AACM,MAAM,cAAc,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoC/B,CAAC;AACM,MAAM,eAAe,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDhC,CAAC;AACM,MAAM,mBAAmB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BpC,CAAC;AACM,MAAM,oBAAoB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBrC,CAAC;AACM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBlC,CAAC;AACM,MAAM,kBAAkB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;AAenC,CAAC;AACM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;AAYlC,CAAC;AACM,MAAM,aAAa,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAO9B,CAAC;AACM,MAAM,sBAAsB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOvC,CAAC;AAEM,MAAM,cAAc,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAO/B,CAAC;AACM,MAAM,cAAc,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAO/B,CAAC;AACM,MAAM,wBAAwB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCzC,CAAC;AAEM,MAAM,gBAAgB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;AAejC,CAAC;AAEM,MAAM,wBAAwB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;AAkBzC,CAAC;AAEM,MAAM,wBAAwB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;AAazC,CAAC;AAEM,MAAM,oBAAoB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCrC,CAAC;AAEM,MAAM,yBAAyB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;AAQ1C,CAAC;AAEM,MAAM,yBAAyB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;AAQ1C,CAAC;AAEM,MAAM,2BAA2B,8IAAA,CAAA,MAAG,CAAC;;;;;;;;AAQ5C,CAAC;AAEM,MAAM,oBAAoB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BrC,CAAC;AAEM,MAAM,sBAAsB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBvC,CAAC;AAEM,MAAM,iBAAiB,8IAAA,CAAA,MAAG,CAAC;;;;;;;AAOlC,CAAC;AAEM,MAAM,2BAA2B,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;AAkB5C,CAAC;AACM,MAAM,yBAAyB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;AAkB1C,CAAC"}},
    {"offset": {"line": 1236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1241, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/views/user/view/user-right/service_token/index.jsx"],"sourcesContent":["// MUI Imports\r\nimport Grid from '@mui/material/Grid'\r\n\r\n// Component Imports\r\nimport ProjectListTable from './ProjectListTable'\r\nimport UserActivityTimeLine from './UserActivityTimeline'\r\nimport ServiceTokenUserListTable from './ServiceTokenUserListTable'\r\n\r\n// Data Imports\r\nimport { getInvoiceData } from '@/app/server/actions'\r\nimport { useSuspenseQuery } from '@apollo/client'\r\nimport { GET_ALL_INVOICES } from '@/graphql/queries'\r\n\r\nconst ServiceTokenViewTab = async () => {\r\n  return (\r\n    <Grid container spacing={6}>\r\n      <Grid item xs={12}>\r\n        <ServiceTokenUserListTable />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ServiceTokenViewTab\r\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;;;;;;;;;;;;;;;;AAad,MAAM,sBAAsB;IAC1B,qBACE,wPAAC,kJAAA,CAAA,UAAI;QAAC,SAAS;QAAC,SAAS;kBACvB,cAAA,wPAAC,kJAAA,CAAA,UAAI;YAAC,IAAI;YAAC,IAAI;sBACb,cAAA,wPAAC,4LAAA,CAAA,UAAyB;;;;;;;;;;;;;;;AAIlC;uCAEe"}},
    {"offset": {"line": 1286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}