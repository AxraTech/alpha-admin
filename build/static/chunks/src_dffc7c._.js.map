{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/configs/i18n.js"],"sourcesContent":["export const i18n = {\r\n  defaultLocale: 'en',\r\n  locales: ['en', 'fr', 'ar'],\r\n  langDirection: {\r\n    en: 'ltr',\r\n    fr: 'ltr',\r\n    ar: 'rtl'\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAO,MAAM,OAAO;IAClB,eAAe;IACf,SAAS;QAAC;QAAM;QAAM;KAAK;IAC3B,eAAe;QACb,IAAI;QACJ,IAAI;QACJ,IAAI;IACN;AACF"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/LangRedirect.jsx"],"sourcesContent":["'use client'\r\n\r\n// Next Imports\r\nimport { redirect, usePathname } from 'next/navigation'\r\n\r\n// Config Imports\r\nimport { i18n } from '@configs/i18n'\r\n\r\nconst LangRedirect = () => {\r\n  const pathname = usePathname()\r\n  const redirectUrl = `/${i18n.defaultLocale}${pathname}`\r\n\r\n  redirect(redirectUrl)\r\n}\r\n\r\nexport default LangRedirect\r\n"],"names":[],"mappings":";;;;;;;AAAA;;;AAQA,MAAM,eAAe;;IACnB,MAAM,WAAW,CAAA,GAAA,oQAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,cAAc,CAAC,CAAC,EAAE,yHAAA,CAAA,OAAI,CAAC,aAAa,CAAC,EAAE,SAAS,CAAC;IAEvD,CAAA,GAAA,oQAAA,CAAA,WAAQ,AAAD,EAAE;AACX;GALM;;QACa,oQAAA,CAAA,cAAW;;;KADxB;uCAOS"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/ApolloWrapper.jsx"],"sourcesContent":["'use client'\r\n// ^ this file needs the \"use client\" pragma\r\nimport { onError } from '@apollo/client/link/error'\r\nimport { ApolloLink, HttpLink } from '@apollo/client'\r\nimport {\r\n  ApolloNextAppProvider,\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  SSRMultipartLink\r\n} from '@apollo/experimental-nextjs-app-support'\r\nimport { setContext } from '@apollo/client/link/context'\r\nimport { createContext, useContext, useState } from 'react'\r\nexport const AppContext = createContext()\r\n// have a function to create a client for you\r\nfunction makeClient() {\r\n  const httpLink = new HttpLink({\r\n    // this needs to be an absolute url, as relative urls cannot be used in SSR\r\n    uri: 'https://alpha.axra.app/v1/graphql',\r\n    // you can disable result caching here if you want to\r\n    // (this does not work if you are rendering your page with `export const dynamic = \"force-static\"`)\r\n    fetchOptions: { cache: 'no-store' }\r\n    // you can override the default `fetchOptions` on a per query basis\r\n    // via the `context` property on the options passed as a second argument\r\n    // to an Apollo Client data fetching hook, e.g.:\r\n    // const { data } = useSuspenseQuery(MY_QUERY, { context: { fetchOptions: { cache: \"force-cache\" }}});\r\n  })\r\n\r\n  const authLink = setContext(async (_, { headers }) => {\r\n    try {\r\n      return {\r\n        headers: {\r\n          ...headers,\r\n          'x-hasura-admin-secret': 'alphapassword'\r\n        }\r\n      }\r\n    } catch (e) {\r\n      return {\r\n        headers\r\n      }\r\n    }\r\n  })\r\n\r\n  // use the `ApolloClient` from \"@apollo/experimental-nextjs-app-support\"\r\n  return new ApolloClient({\r\n    // use the `InMemoryCache` from \"@apollo/experimental-nextjs-app-support\"\r\n    cache: new InMemoryCache(),\r\n    link: errorLink.concat(authLink).concat(httpLink)\r\n  })\r\n}\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors) {\r\n    console.log('graphql', graphQLErrors)\r\n    graphQLErrors.forEach(({ extensions }) => {\r\n      if (extensions.code === 'invalid-headers' || extensions.code === 'invalid-jwt') {\r\n        localStorage.clear()\r\n        window.location.assign(`${window.location.origin}/login`)\r\n      }\r\n    })\r\n  }\r\n  if (networkError) {\r\n    console.log(`[Network error]: ${networkError}`)\r\n    alert('network connection problem')\r\n  }\r\n})\r\n\r\nexport const useApp = () => {\r\n  return useContext(AppContext)\r\n}\r\n// you need to create a component to wrap your app in\r\nexport function ApolloWrapper({ children }) {\r\n  const [globalMsg, setGlobalMsg] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n  return (\r\n    <ApolloNextAppProvider makeClient={makeClient}>\r\n      <AppContext.Provider value={{ globalMsg, setGlobalMsg, loading, setLoading }}>{children}</AppContext.Provider>\r\n    </ApolloNextAppProvider>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;AAYO,MAAM,2BAAa,CAAA,GAAA,4RAAA,CAAA,gBAAa,AAAD;AACtC,6CAA6C;AAC7C,SAAS;IACP,MAAM,WAAW,IAAI,yWAAA,CAAA,WAAQ,CAAC;QAC5B,2EAA2E;QAC3E,KAAK;QACL,qDAAqD;QACrD,mGAAmG;QACnG,cAAc;YAAE,OAAO;QAAW;IAKpC;IAEA,MAAM,WAAW,CAAA,GAAA,yWAAA,CAAA,aAAU,AAAD,EAAE,OAAO,GAAG,EAAE,OAAO,EAAE;QAC/C,IAAI;YACF,OAAO;gBACL,SAAS;oBACP,GAAG,OAAO;oBACV,yBAAyB;gBAC3B;YACF;QACF,EAAE,OAAO,GAAG;YACV,OAAO;gBACL;YACF;QACF;IACF;IAEA,wEAAwE;IACxE,OAAO,IAAI,6ZAAA,CAAA,eAAY,CAAC;QACtB,yEAAyE;QACzE,OAAO,IAAI,6ZAAA,CAAA,gBAAa;QACxB,MAAM,UAAU,MAAM,CAAC,UAAU,MAAM,CAAC;IAC1C;AACF;AAEA,MAAM,YAAY,CAAA,GAAA,uWAAA,CAAA,UAAO,AAAD,EAAE,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE;IACxD,IAAI,eAAe;QACjB,QAAQ,GAAG,CAAC,WAAW;QACvB,cAAc,OAAO,CAAC,CAAC,EAAE,UAAU,EAAE;YACnC,IAAI,WAAW,IAAI,KAAK,qBAAqB,WAAW,IAAI,KAAK,eAAe;gBAC9E,aAAa,KAAK;gBAClB,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;YAC1D;QACF;IACF;IACA,IAAI,cAAc;QAChB,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,aAAa,CAAC;QAC9C,MAAM;IACR;AACF;AAEO,MAAM,SAAS;;IACpB,OAAO,CAAA,GAAA,4RAAA,CAAA,aAAU,AAAD,EAAE;AACpB;GAFa;AAIN,SAAS,cAAc,EAAE,QAAQ,EAAE;;IACxC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,qBACE,4TAAC,6ZAAA,CAAA,wBAAqB;QAAC,YAAY;kBACjC,cAAA,4TAAC,WAAW,QAAQ;YAAC,OAAO;gBAAE;gBAAW;gBAAc;gBAAS;YAAW;sBAAI;;;;;;;;;;;AAGrF;IARgB;KAAA"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}